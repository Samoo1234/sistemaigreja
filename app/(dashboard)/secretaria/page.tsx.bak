'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogClose,
} from '@/components/ui/dialog'
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'
import { Calendar } from '@/components/ui/calendar'
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Plus, Search, Edit, Trash2, Calendar as CalendarIcon, Mail, Phone, MapPin, User, FileText } from 'lucide-react'
import { format } from 'date-fns'
import { ptBR } from 'date-fns/locale'
import { z } from 'zod'
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { db } from '@/lib/firebase/config'
import { collection, addDoc, getDocs, doc, deleteDoc, updateDoc } from 'firebase/firestore'
import Link from 'next/link'

// Define o esquema de validação para o formulário
const formSchema = z.object({
  nome: z.string().min(3, 'O nome deve ter pelo menos 3 caracteres'),
  email: z.string().email('Email inválido'),
  telefone: z.string().min(10, 'O telefone deve ter pelo menos 10 dígitos'),
  endereco: z.string().min(5, 'O endereço deve ter pelo menos 5 caracteres'),
  cidade: z.string().min(2, 'A cidade deve ter pelo menos 2 caracteres'),
  estado: z.string().length(2, 'O estado deve ter 2 caracteres (sigla)'),
  dataNascimento: z.date().optional(),
  dataBatismo: z.date().optional(),
  congregacao: z.string().min(1, 'Selecione uma congregação'),
  funcao: z.string().optional(),
  status: z.enum(['ativo', 'inativo', 'visitante']),
})

type FormValues = z.infer<typeof formSchema>

// Define o esquema de validação para o formulário de cartas
const cartaFormSchema = z.object({
  tipo: z.enum(['recomendacao', 'mudanca']),
  destinatario: z.string().min(3, 'O destinatário deve ter pelo menos 3 caracteres'),
  cidade: z.string().min(2, 'A cidade deve ter pelo menos 2 caracteres'),
  membroId: z.string().min(1, 'Selecione um membro'),
})

type CartaFormValues = z.infer<typeof cartaFormSchema>

// Tipo para os membros
type Membro = {
  id: string
  nome: string
  email: string
  telefone: string
  endereco: string
  cidade: string
  estado: string
  dataNascimento?: Date
  dataBatismo?: Date
  congregacao: string
  funcao?: string
  status: 'ativo' | 'inativo' | 'visitante'
  avatar?: string
}

// Tipo para as cartas
type Carta = {
  id: string
  tipo: 'recomendacao' | 'mudanca' | 'agradecimento' | 'outro'
  destinatario: string
  cidade: string
  data: Date
  status: 'pendente' | 'enviada' | 'recebida'
  membro?: string
  membroId?: string
  conteudo?: string
}

export default function SecretariaPage() {
  const [membros, setMembros] = useState<Membro[]>([])
  const [cartas, setCartas] = useState<Carta[]>([])
  const [loading, setLoading] = useState(true)
  const [searchQuery, setSearchQuery] = useState('')
  const [membroParaEditar, setMembroParaEditar] = useState<Membro | null>(null)
  const [dialogOpen, setDialogOpen] = useState(false)
  const [cartaDialogOpen, setCartaDialogOpen] = useState(false)
  const [previewCartaOpen, setPreviewCartaOpen] = useState(false)
  const [cartaAtual, setCartaAtual] = useState<Carta | null>(null)
  const [filtroStatus, setFiltroStatus] = useState<'todos' | 'ativo' | 'inativo' | 'visitante'>('todos')
  const [activeTab, setActiveTab] = useState<"membros" | "cartas">("membros")
  const [nomeIgreja, setNomeIgreja] = useState("Igreja Evangélica Estandarte do Evangelho")
  const [enderecoIgreja, setEnderecoIgreja] = useState("Rua Tenente Djalma Dutra, nº xx - Bairro Bom Jesus")
  const [cidadeIgreja, setCidadeIgreja] = useState("São José dos Pinhais / PR - CEP: 83005-360")

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      nome: '',
      email: '',
      telefone: '',
      endereco: '',
      cidade: '',
      estado: '',
      congregacao: '',
      funcao: '',
      status: 'ativo',
    }
  })

  const cartaForm = useForm<CartaFormValues>({
    resolver: zodResolver(cartaFormSchema),
    defaultValues: {
      tipo: 'recomendacao',
      destinatario: '',
      cidade: '',
      membroId: '',
    }
  })

  // Lista de congregações (em um caso real, seria carregado do Firebase)
  const congregacoes = [
    { id: '1', nome: 'Congregação Sede' },
    { id: '2', nome: 'Congregação Norte' },
    { id: '3', nome: 'Congregação Sul' },
    { id: '4', nome: 'Congregação Leste' },
    { id: '5', nome: 'Congregação Oeste' },
  ]

  // Lista de funções na igreja
  const funcoes = [
    'Membro',
    'Diácono',
    'Presbítero',
    'Evangelista',
    'Pastor',
    'Líder de Louvor',
    'Líder de Jovens',
    'Líder de Crianças',
    'Tesoureiro',
    'Secretário',
    'Outro'
  ]

  // Simula o carregamento de membros e cartas
  useEffect(() => {
    // Em um caso real, isso buscaria os dados do Firebase
    const mockMembros: Membro[] = [
      {
        id: '1',
        nome: 'Maria Silva',
        email: 'maria.silva@exemplo.com',
        telefone: '(11) 99999-8888',
        endereco: 'Rua das Flores, 123',
        cidade: 'São Paulo',
        estado: 'SP',
        dataNascimento: new Date(1985, 5, 15),
        dataBatismo: new Date(2000, 3, 10),
        congregacao: 'Congregação Sede',
        funcao: 'Líder de Louvor',
        status: 'ativo',
        avatar: 'https://i.pravatar.cc/150?img=32'
      },
      {
        id: '2',
        nome: 'João Oliveira',
        email: 'joao.oliveira@exemplo.com',
        telefone: '(11) 97777-6666',
        endereco: 'Av. Principal, 456',
        cidade: 'São Paulo',
        estado: 'SP',
        dataNascimento: new Date(1978, 2, 20),
        dataBatismo: new Date(1995, 9, 5),
        congregacao: 'Congregação Norte',
        funcao: 'Diácono',
        status: 'ativo',
        avatar: 'https://i.pravatar.cc/150?img=57'
      },
      {
        id: '3',
        nome: 'Ana Santos',
        email: 'ana.santos@exemplo.com',
        telefone: '(11) 95555-4444',
        endereco: 'Rua do Comércio, 789',
        cidade: 'São Paulo',
        estado: 'SP',
        dataNascimento: new Date(1990, 8, 12),
        dataBatismo: new Date(2008, 6, 22),
        congregacao: 'Congregação Sul',
        funcao: 'Secretário',
        status: 'ativo',
        avatar: 'https://i.pravatar.cc/150?img=23'
      },
      {
        id: '4',
        nome: 'Carlos Ferreira',
        email: 'carlos.ferreira@exemplo.com',
        telefone: '(11) 93333-2222',
        endereco: 'Travessa das Árvores, 101',
        cidade: 'Guarulhos',
        estado: 'SP',
        dataNascimento: new Date(1982, 11, 5),
        dataBatismo: new Date(2002, 4, 15),
        congregacao: 'Congregação Leste',
        funcao: 'Presbítero',
        status: 'inativo',
        avatar: 'https://i.pravatar.cc/150?img=55'
      },
      {
        id: '5',
        nome: 'Juliana Lima',
        email: 'juliana.lima@exemplo.com',
        telefone: '(11) 91111-0000',
        endereco: 'Rua do Parque, 202',
        cidade: 'Osasco',
        estado: 'SP',
        dataNascimento: new Date(1995, 4, 25),
        congregacao: 'Congregação Oeste',
        status: 'visitante',
        avatar: 'https://i.pravatar.cc/150?img=34'
      }
    ]

    const mockCartas: Carta[] = [
      {
        id: '1',
        tipo: 'recomendacao',
        destinatario: 'Igreja Batista Central',
        cidade: 'São Paulo',
        data: new Date(2023, 9, 10),
        status: 'enviada',
        membro: 'João Oliveira',
        conteudo: 'Carta de recomendação para o irmão João Oliveira...'
      },
      {
        id: '2',
        tipo: 'mudanca',
        destinatario: 'Igreja Presbiteriana',
        cidade: 'São Paulo',
        data: new Date(2023, 10, 5),
        status: 'pendente',
        membro: 'Ana Santos',
        conteudo: 'Solicitação de transferência para a irmã Ana Santos...'
      },
      {
        id: '3',
        tipo: 'agradecimento',
        destinatario: 'Comunidade Cristã',
        cidade: 'São Paulo',
        data: new Date(2023, 8, 15),
        status: 'recebida',
        conteudo: 'Agradecemos a parceria no último evento...'
      }
    ]

    setTimeout(() => {
      setMembros(mockMembros)
      setCartas(mockCartas)
      setLoading(false)
    }, 1000)
  }, [])

  // Filtra membros com base na busca e status
  const membrosFiltrados = membros.filter(membro => {
    const matchesSearch = membro.nome.toLowerCase().includes(searchQuery.toLowerCase()) ||
      membro.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      membro.congregacao.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (membro.funcao && membro.funcao.toLowerCase().includes(searchQuery.toLowerCase()))
    
    const matchesStatus = filtroStatus === 'todos' || membro.status === filtroStatus
    
    return matchesSearch && matchesStatus
  })

  // Organiza membros por nome
  const membrosOrdenados = [...membrosFiltrados].sort((a, b) => a.nome.localeCompare(b.nome))

  // Contagens para estatísticas
  const totalAtivos = membros.filter(m => m.status === 'ativo').length
  const totalInativos = membros.filter(m => m.status === 'inativo').length
  const totalVisitantes = membros.filter(m => m.status === 'visitante').length

  // Abre o diálogo para edição
  const handleEditarMembro = (membro: Membro) => {
    setMembroParaEditar(membro)
    form.reset({
      nome: membro.nome,
      email: membro.email,
      telefone: membro.telefone,
      endereco: membro.endereco,
      cidade: membro.cidade,
      estado: membro.estado,
      dataNascimento: membro.dataNascimento,
      dataBatismo: membro.dataBatismo,
      congregacao: membro.congregacao,
      funcao: membro.funcao,
      status: membro.status,
    })
    setDialogOpen(true)
  }

  // Abre o diálogo para criar novo membro
  const handleNovoMembro = () => {
    setMembroParaEditar(null)
    form.reset({
      nome: '',
      email: '',
      telefone: '',
      endereco: '',
      cidade: '',
      estado: '',
      congregacao: '',
      funcao: '',
      status: 'ativo',
    })
    setDialogOpen(true)
  }

  // Exclui um membro
  const handleExcluirMembro = (id: string) => {
    // Em um caso real, isso excluiria o membro do Firebase
    setMembros(membros.filter(membro => membro.id !== id))
  }

  // Salva o formulário (criação/edição)
  const onSubmit = (values: FormValues) => {
    if (membroParaEditar) {
      // Atualiza membro existente
      const membrosAtualizados = membros.map(membro =>
        membro.id === membroParaEditar.id
          ? { ...membro, ...values }
          : membro
      )
      setMembros(membrosAtualizados)
    } else {
      // Cria novo membro
      const novoMembro: Membro = {
        id: Math.random().toString(36).substring(2, 9), // Gera ID aleatório (em produção usaria o ID do Firebase)
        ...values,
        avatar: `https://i.pravatar.cc/150?img=${Math.floor(Math.random() * 70)}` // Avatar aleatório para demonstração
      }
      setMembros([...membros, novoMembro])
    }
    setDialogOpen(false)
  }

  // Abre o diálogo para criar nova carta
  const handleNovaCarta = () => {
    cartaForm.reset({
      tipo: 'recomendacao',
      destinatario: '',
      cidade: '',
      membroId: '',
    })
    setCartaAtual(null)
    setCartaDialogOpen(true)
  }

  // Visualiza uma carta existente
  const handleVisualizarCarta = (carta: Carta) => {
    setCartaAtual(carta)
    setPreviewCartaOpen(true)
  }
  
  // Exclui uma carta
  const handleExcluirCarta = (id: string) => {
    // Em um caso real, isso excluiria a carta do Firebase
    setCartas(cartas.filter(carta => carta.id !== id))
  }

  // Salva o formulário de carta
  const onSubmitCarta = (values: CartaFormValues) => {
    const membroSelecionado = membros.find(m => m.id === values.membroId)
    
    if (!membroSelecionado) {
      return // Membro não encontrado
    }
    
    const novaCarta: Carta = {
      id: Math.random().toString(36).substring(2, 9), // Gera ID aleatório
      tipo: values.tipo,
      destinatario: values.destinatario,
      cidade: values.cidade,
      data: new Date(),
      status: 'pendente',
      membro: membroSelecionado.nome,
      membroId: membroSelecionado.id,
      conteudo: values.tipo === 'recomendacao'
        ? `Apresentamos as Igrejas Evangélicas na Cidade de ${values.cidade}, o(a) irmão(ã) ${membroSelecionado.nome}, membro desta igreja. Por se achar em plena comunhão com essa Igreja, nós a recomendamos que recebais em comunhão no Senhor como usam fazer os Santos.`
        : `Comunicamos que o(a) irmão(ã) ${membroSelecionado.nome}, portador(a) deste, era membro em plena comunhão desta Igreja, e a pedido seu concedemos-lhe esta Carta Demissória para se unir à igreja de vossa direção.`
    }
    
    setCartas([...cartas, novaCarta])
    setCartaDialogOpen(false)
    
    // Abre a visualização da carta
    setCartaAtual(novaCarta)
    setPreviewCartaOpen(true)
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h1 className="text-3xl font-bold">Secretaria</h1>
      </div>

      <Tabs defaultValue="membros" className="w-full" onValueChange={(value) => setActiveTab(value as "membros" | "cartas")}>
        <TabsList className="grid w-full md:w-[400px] grid-cols-2">
          <TabsTrigger value="membros" className="flex items-center">
            <User className="mr-2 h-4 w-4" />
            Membros
          </TabsTrigger>
          <TabsTrigger value="cartas" className="flex items-center">
            <FileText className="mr-2 h-4 w-4" />
            Cartas
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="membros" className="space-y-6 mt-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div>
              <h2 className="text-xl font-semibold mb-2">Gestão de Membros</h2>
              <p className="text-muted-foreground">Gerencie os membros da igreja, seus dados e status.</p>
            </div>
            <Button onClick={handleNovoMembro}>
              <Plus className="mr-2 h-4 w-4" />
              Novo Membro
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <Card className="bg-blue-50 border-blue-200">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium text-blue-800">Total de Membros</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-3xl font-bold text-blue-700">{membros.length}</p>
              </CardContent>
            </Card>
            
            <Card className="bg-green-50 border-green-200">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium text-green-800">Membros Ativos</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-3xl font-bold text-green-700">{totalAtivos}</p>
              </CardContent>
            </Card>
            
            <Card className="bg-orange-50 border-orange-200">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium text-orange-800">Membros Inativos</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-3xl font-bold text-orange-700">{totalInativos}</p>
              </CardContent>
            </Card>
            
            <Card className="bg-purple-50 border-purple-200">
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium text-purple-800">Visitantes</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-3xl font-bold text-purple-700">{totalVisitantes}</p>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <CardTitle>Lista de Membros</CardTitle>
                <div className="flex gap-4 w-full sm:w-auto">
                  <Tabs defaultValue="todos" className="w-full sm:w-[200px]" onValueChange={(value) => setFiltroStatus(value as any)}>
                    <TabsList className="grid w-full grid-cols-4">
                      <TabsTrigger value="todos">Todos</TabsTrigger>
                      <TabsTrigger value="ativo">Ativos</TabsTrigger>
                      <TabsTrigger value="inativo">Inativos</TabsTrigger>
                      <TabsTrigger value="visitante">Visitantes</TabsTrigger>
                    </TabsList>
                  </Tabs>
                  <div className="relative w-full sm:w-64">
                    <Search className="absolute left-2 top-2.5 h-4 w-4 text-gray-500" />
                    <Input
                      placeholder="Buscar membros..."
                      className="pl-8"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                  </div>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="space-y-4">
                  {[...Array(4)].map((_, index) => (
                    <div key={index} className="animate-pulse">
                      <div className="h-12 bg-gray-200 rounded-md mb-4"></div>
                    </div>
                  ))}
                </div>
              ) : membrosOrdenados.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-gray-500">Nenhum membro encontrado.</p>
                  <Button
                    variant="outline"
                    className="mt-4"
                    onClick={handleNovoMembro}
                  >
                    <Plus className="mr-2 h-4 w-4" />
                    Adicionar Membro
                  </Button>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Nome</TableHead>
                        <TableHead>Contato</TableHead>
                        <TableHead>Congregação</TableHead>
                        <TableHead>Função</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead className="text-right">Ações</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {membrosOrdenados.map((membro) => (
                        <TableRow key={membro.id}>
                          <TableCell>
                            <div className="flex items-center space-x-3">
                              <Avatar>
                                <AvatarImage src={membro.avatar} alt={membro.nome} />
                                <AvatarFallback>{membro.nome.charAt(0) + membro.nome.split(' ')[1]?.charAt(0)}</AvatarFallback>
                              </Avatar>
                              <div>
                                <p className="font-medium">{membro.nome}</p>
                                <p className="text-xs text-gray-500">
                                  {membro.dataNascimento && (
                                    <>Nasc: {format(membro.dataNascimento, "dd/MM/yyyy")}</>
                                  )}
                                </p>
                              </div>
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="space-y-1">
                              <div className="flex items-center text-sm">
                                <Mail className="h-3.5 w-3.5 mr-1 text-gray-500" />
                                {membro.email}
                              </div>
                              <div className="flex items-center text-sm">
                                <Phone className="h-3.5 w-3.5 mr-1 text-gray-500" />
                                {membro.telefone}
                              </div>
                            </div>
                          </TableCell>
                          <TableCell>{membro.congregacao}</TableCell>
                          <TableCell>{membro.funcao || 'Membro'}</TableCell>
                          <TableCell>
                            <div className={`
```
      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent className="sm:max-w-[700px]">
          <DialogHeader>
            <DialogTitle>
              {membroParaEditar ? 'Editar Membro' : 'Novo Membro'}
            </DialogTitle>
            <DialogDescription>
              Preencha os detalhes do membro abaixo.
            </DialogDescription>
          </DialogHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              {/* Formulário existente de membros */}
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* Diálogo para criar/editar cartas */}
      <Dialog open={cartaDialogOpen} onOpenChange={setCartaDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Nova Carta</DialogTitle>
            <DialogDescription>
              Selecione o membro e insira os detalhes da carta.
            </DialogDescription>
          </DialogHeader>
          <Form {...cartaForm}>
            <form onSubmit={cartaForm.handleSubmit(onSubmitCarta)} className="space-y-4">
              <FormField
                control={cartaForm.control}
                name="tipo"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tipo de Carta</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                      value={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecione o tipo" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="recomendacao">Carta de Recomendação</SelectItem>
                        <SelectItem value="mudanca">Carta de Mudança</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={cartaForm.control}
                name="membroId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Membro</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                      value={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Selecione um membro" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {membros.filter(m => m.status === 'ativo').map((membro) => (
                          <SelectItem key={membro.id} value={membro.id}>
                            {membro.nome}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={cartaForm.control}
                name="destinatario"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Destinatário</FormLabel>
                    <FormControl>
                      <Input placeholder="Nome da igreja destinatária" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={cartaForm.control}
                name="cidade"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Cidade</FormLabel>
                    <FormControl>
                      <Input placeholder="Cidade de destino" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <DialogFooter>
                <DialogClose asChild>
                  <Button type="button" variant="outline">Cancelar</Button>
                </DialogClose>
                <Button type="submit">Gerar Carta</Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* Diálogo para visualizar/imprimir a carta */}
      <Dialog open={previewCartaOpen} onOpenChange={setPreviewCartaOpen}>
        <DialogContent className="sm:max-w-[800px] max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Visualização da Carta</DialogTitle>
            <DialogDescription>
              Clique em Imprimir para salvar ou imprimir esta carta.
            </DialogDescription>
          </DialogHeader>
          
          {cartaAtual && (
            <div className="p-6 border rounded-md bg-white">
              <div className="text-center mb-6 space-y-2">
                <div className="h-20 w-20 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-2">
                  <div className="text-xs text-gray-500">LOGO</div>
                </div>
                <h1 className="text-xl font-bold uppercase">{nomeIgreja}</h1>
                <p className="text-sm text-gray-600">{enderecoIgreja}</p>
                <p className="text-sm text-gray-600">{cidadeIgreja}</p>
              </div>
              
              <h2 className="text-center text-xl font-bold mb-8">
                {cartaAtual.tipo === 'recomendacao' ? 'CARTA DE RECOMENDAÇÃO' : 'CARTA DE MUDANÇA'}
              </h2>
              
              <p className="mb-6 font-semibold">Saudações do Senhor:</p>
              
              <div className="mb-8 text-justify">
                {cartaAtual.tipo === 'recomendacao' ? (
                  <p>
                    Apresentamos às Igrejas Evangélicas na Cidade de{' '}
                    <span className="font-semibold">{cartaAtual.cidade}</span>, o(a) irmão(ã){' '}
                    <span className="font-semibold uppercase">{cartaAtual.membro}</span>, membro desta igreja.
                    <br /><br />
                    Por se achar em plena comunhão com essa Igreja, nós a recomendamos que recebais em comunhão no Senhor como usam fazer os Santos.
                  </p>
                ) : (
                  <p>
                    Comunicamos que o(a) irmão(ã){' '}
                    <span className="font-semibold uppercase">{cartaAtual.membro}</span>, portador(a) deste, era membro em plena comunhão desta Igreja, e a pedido seu concedemos-lhe esta Carta Demissória para se unir à igreja de vossa direção.
                  </p>
                )}
              </div>
              
              <p className="mb-8">
                Pela {nomeIgreja} em {cidadeIgreja.split('-')[0].trim()}.
              </p>
              
              <div className="text-center">
                <div className="border-t border-gray-400 w-48 mx-auto pt-2">
                  <p>Pastor</p>
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button 
              type="button" 
              variant="outline" 
              onClick={() => setPreviewCartaOpen(false)}
            >
              Fechar
            </Button>
            <Button 
              type="button"
              onClick={() => window.print()}
            >
              Imprimir
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}